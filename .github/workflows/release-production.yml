name: üöÄ Release Production

on:
  push:
    branches:
      - main

jobs:
  remove-old-artifact:
    name: üóëÔ∏è Remove Old Artifacts
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üß™ Test SSH Connection
        run: |
          sshpass -p "${{ secrets.HUAWEI_CLOUD_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HUAWEI_CLOUD_USERNAME }}@${{ secrets.HUAWEI_CLOUD_HOST }} "echo '‚úÖ SSH Success'" || echo "‚ùå SSH Failed"

      # - name: üóëÔ∏è Delete Old Artifacts
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const perPage = 100;
      #       let page = 1;
      #       let artifacts = [];

      #       while (true) {
      #         const res = await github.rest.actions.listArtifactsForRepo({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           per_page: perPage,
      #           page: page
      #         });

      #         artifacts = res.data.artifacts;
      #         if (artifacts.length === 0) break;

      #         for (const artifact of artifacts) {
      #           const createdAt = new Date(artifact.created_at);
      #           const ageInDays = (Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24);

      #           if (ageInDays > 1) {
      #             console.log(`Deleting artifact ${artifact.name} (ID: ${artifact.id})`);
      #             await github.rest.actions.deleteArtifact({
      #               owner: context.repo.owner,
      #               repo: context.repo.repo,
      #               artifact_id: artifact.id,
      #             });
      #           }
      #         }

      #         page++;
      #       }

  # sonarqube-scan:
  #   name: "üß™ SonarQube Scan"
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: "üì• Checkout Code"
  #       uses: actions/checkout@v3

  #     - name: "‚òï Setup Java"
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"

  #     - name: "‚öôÔ∏è Setup Node.js"
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"

  #     - name: "üì¶ Install Dependencies"
  #       run: npm ci

  #     - name: "üîç Run SonarQube Scan"
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  #       run: |
  #         npm install -g sonarqube-scanner
  #         sonar-scanner \
  #           -Dsonar.projectKey=sb-web-helper \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=${{ secrets.SONARQUBE_HOST_URL }} \
  #           -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  build:
    name: "üî® Build on Runner"
    needs: remove-old-artifact
    runs-on: ubuntu-latest

    steps:
      - name: "üì• Checkout Code"
        uses: actions/checkout@v3

      - name: "‚öôÔ∏è Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: "üì¶ Install Dependencies"
        run: npm ci

      - name: "‚öôÔ∏è Prisma Generate"
        run: npx prisma generate --schema=prisma/schema.prisma

      - name: "üèóÔ∏è Build Project"
        run: |
          npm run build
          # Compile any raw .ts scripts (e.g., K6, helpers) if needed at runtime
          if [ -d src/helpers/scripts ]; then
            find src/helpers/scripts -name "*.ts" | while read tsfile; do
              jsfile="${tsfile%.ts}.js"
              # Only compile if not present in .next or not already compiled
              if [ ! -f "$jsfile" ]; then
                npx tsc "$tsfile" --outDir "$(dirname "$tsfile")" --esModuleInterop --target ES2020
              fi
            done
          fi
          # Optionally copy tsconfig.json if needed for runtime
          cp tsconfig.json ./ || true

      - name: "üì§ Archive Build Artifacts"
        run: |
          # Archive build output, including any .ts scripts and config files needed at runtime
          zip -r build.zip \
            .next \
            public \
            generated/prisma \
            package.json \
            package-lock.json \
            next.config.mjs \
            tsconfig.json \
            $(find src/helpers/scripts -type f \( -name "*.ts" -o -name "*.js" -o -name ".*" \))

      - name: "‚¨ÜÔ∏è Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build.zip

  deploy:
    name: "üöö Deploy to Server"
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: "üóëÔ∏è Delete old deployment folder"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            rm -rf /var/www/sb-web-helper/*

      - name: "üì• Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: "üîê Copy to Server via SCP"
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          source: "build.zip"
          target: "/var/www/sb-web-helper"

      - name: "üóúÔ∏è Unzip & Install on Server"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            cd /var/www/sb-web-helper
            unzip -o build.zip
            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ production dependencies
            npm ci --omit=dev
            # ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó service
            sudo systemctl restart sb-web-helper.service

            # Optional: Validate artifact exists after unzip
            if [ ! -d ".next" ]; then
              echo "‚ùå .next directory missing after unzip!"
              exit 1
            fi
