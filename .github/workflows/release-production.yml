name: 🚀 Release Production

on:
  push:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  remove-old-artifact:
    name: 🗑️ Remove Old Artifacts
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 🧪 Test SSH Connection
        run: |
          sshpass -p "${{ secrets.HUAWEI_CLOUD_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HUAWEI_CLOUD_USERNAME }}@${{ secrets.HUAWEI_CLOUD_HOST }} "echo '✅ SSH Success'" || echo "❌ SSH Failed"

  build:
    name: "🔨 Build on Runner"
    needs: remove-old-artifact
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v3

      - name: "⚙️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: "📦 Install Dependencies"
        run: npm ci --no-audit --no-fund

      - name: "🩹 Install missing type packages"
        run: |
          npm install --save-dev \
            @types/moment \
            @types/node \
            @types/react \
            @types/react-redux \
            @types/chart.js \
            csstype

      - name: "⚙️ Prisma Generate"
        run: npx prisma generate --schema=prisma/schema.prisma

      - name: "🏗️ Build Project and Compile Helpers"
        run: |
          npm run build

          # Compile helper TypeScript scripts if not already compiled
          if [ -d src/helpers/scripts ]; then
            find src/helpers/scripts -name "*.ts" | while read tsfile; do
              jsfile="${tsfile%.ts}.js"
              if [ ! -f "$jsfile" ]; then
                npx tsc "$tsfile" --outDir "$(dirname "$tsfile")" --esModuleInterop --target ES2020
              fi
            done
          fi

      - name: "📄 Copy tsconfig.json for runtime (if needed)"
        run: cp tsconfig.json ./ || true

      - name: "📤 Archive Build Artifacts"
        run: |
          zip -r build.zip \
            .next \
            public \
            generated/prisma \
            package.json \
            package-lock.json \
            next.config.mjs \
            tsconfig.json \
            $(find src/helpers/scripts -type f \( -name "*.ts" -o -name "*.js" -o -name ".*" \))

      - name: "⬆️ Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build.zip

  deploy:
    name: "🚚 Deploy to Server"
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: "🗑️ Delete old deployment folder"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            rm -rf /var/www/sb-web-helper/*

      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: "🔐 Copy to Server via SCP"
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          source: "build.zip"
          target: "/var/www/sb-web-helper"

      - name: "🗜️ Unzip & Install on Server"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            cd /var/www/sb-web-helper
            unzip -o build.zip
            npm ci --omit=dev
            sudo systemctl restart sb-web-helper.service

            if [ ! -d ".next" ]; then
              echo "❌ .next directory missing after unzip!"
              exit 1
            fi
