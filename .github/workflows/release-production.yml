name: 🚀 Release Production

on:
  push:
    branches:
      - main

jobs:
  remove-old-artifact:
    name: 🗑️ Remove Old Artifacts
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: 🧪 Test SSH Connection
        run: |
          sshpass -p "${{ secrets.HUAWEI_CLOUD_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HUAWEI_CLOUD_USERNAME }}@${{ secrets.HUAWEI_CLOUD_HOST }} "echo '✅ SSH Success'" || echo "❌ SSH Failed"

      # - name: 🗑️ Delete Old Artifacts
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const perPage = 100;
      #       let page = 1;
      #       let artifacts = [];

      #       while (true) {
      #         const res = await github.rest.actions.listArtifactsForRepo({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           per_page: perPage,
      #           page: page
      #         });

      #         artifacts = res.data.artifacts;
      #         if (artifacts.length === 0) break;

      #         for (const artifact of artifacts) {
      #           const createdAt = new Date(artifact.created_at);
      #           const ageInDays = (Date.now() - createdAt.getTime()) / (1000 * 60 * 60 * 24);

      #           if (ageInDays > 1) {
      #             console.log(`Deleting artifact ${artifact.name} (ID: ${artifact.id})`);
      #             await github.rest.actions.deleteArtifact({
      #               owner: context.repo.owner,
      #               repo: context.repo.repo,
      #               artifact_id: artifact.id,
      #             });
      #           }
      #         }

      #         page++;
      #       }

  build:
    name: "🔨 Build on Runner"
    needs: remove-old-artifact
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v3

      - name: "⚙️ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: "📦 Install Dependencies"
        run: npm ci

      - name: "⚙️ Prisma Generate"
        run: npx prisma generate --schema=prisma/schema.prisma

      - name: "🏗️ Build Project"
        run: npm run build

      - name: "📤 Archive Build Artifacts"
        run: |
          zip -r build.zip \
            .next \
            generated/prisma \
            package.json \
            package-lock.json \
            next.config.js

      - name: "⬆️ Upload Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build.zip

  deploy:
    name: "🚚 Deploy to Server"
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: "🗑️ Delete old deployment folder"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            rm -rf /var/www/sb-web-helper/*

      - name: "📥 Download Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: "🔐 Copy to Server via SCP"
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          source: "build.zip"
          target: "/var/www/sb-web-helper"

      - name: "🗜️ Unzip & Install on Server"
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HUAWEI_CLOUD_HOST }}
          username: ${{ secrets.HUAWEI_CLOUD_USERNAME }}
          password: ${{ secrets.HUAWEI_CLOUD_PASSWORD }}
          port: ${{ secrets.HUAWEI_CLOUD_SSH_PORT }}
          script: |
            cd /var/www/sb-web-helper
            unzip -o build.zip
            # ติดตั้งเฉพาะ production dependencies
            npm ci --production
            # รีสตาร์ท service
            sudo systemctl restart sb-web-helper.service

  notify:
    name: "📬 Discord Notification"
    runs-on: ubuntu-latest
    environment: production
    needs: deploy
    steps:
      - name: 📣  Notify Discord on Success
        if: success()
        run: |
          COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | sed ':a;N;$!ba;s/\n/\\n/g')
          curl --location '${{vars.DISCORD_WEBHOOK}}' \
          --header 'Content-Type: application/json' \
          --data-raw "{
            \"content\": \"✅ **Deployment Successful!**\\n🖥️ Server: **${{vars.SERVER}}**\\n👤 Pushed By: **${{github.actor}}**\\n📌 Commit:\\n\`\`\`${COMMIT_MESSAGE}\`\`\`\\n👥 <${{vars.DISCORD_ROLE_QA}}> <${{vars.DISCORD_ROLE_SUPPORT}}>\"
          }"
